#include <iostream>
#include <vector>
#include <climits>
using namespace std;

#define DRAIN 2
#define GATE  1
#define SOURCE 0

#define HIGHV 1
#define LOWV  0
#define NULLV 2

#define NMOS  0
#define PMOS  1
#define OUTPUT  2

#define AND   0
#define NAND  1
#define NOR   2
#define OR    3
#define XOR   4
#define XNOR  5

#define EDGELENGTH 4


struct Mos;

struct Edge{
    Mos *mPoint;
    int volt ; // on(1) off(0) or not set yet(2)
    Edge(int v){
        volt = v;
        mPoint = NULL;
    };
    Edge(){
        volt = NULLV;
        mPoint = NULL;
    }
};

struct Mos{
    Edge edges[EDGELENGTH];
    int tType = OUTPUT; // Nmos(0) or Pmos(1) output(2)
    int input = NULLV; //input1(1) input2(2)
    Mos(int type){
        tType = type;
        Edge e1(NULLV);
        edges[SOURCE] = e1;//source 0
        edges[GATE] = e1; //gate 1
        edges[DRAIN] = e1; //drain 2
    };
};



class gate{
    public:
        gate(int type);
        void setInputs(int in1, int in2);
        int getOutput();
    private:
        //vector<Edge&> input1;
        //vector<Edge&> input2;
        vector<Mos> transistors;
        Mos* BigOut;
        bool created = false;
        int type; // AND, NAND, OR, NOR, XOR, NOT

        // GATE helper functions
        void createAND();
        void createNAND();
        void createOR();
        void createNOR();
        void createXOR();
        void createXNOR();
        //createNOT(wer); possible add later (only has one input)

        // Create helper functions
        void addMos(int t, int num);
        void addEdge(char f, Mos *from, char t, Mos *point);

        void addInput1Edge(Mos* node);
        void addInput2Edge(Mos* node);

        void addVoltageEdge(int v, Mos* node);

        // getOutput helper functions
        bool mosOn(Mos* node);
        int DFS_helper(Mos* node);
        // void setEdge(int v);
};

class PriorityQueue
{
    public:
    PriorityQueue(int queueSize);
    ~PriorityQueue();
    void enqueue (std::string _groupName, int _groupSize, int _cookingTime);
void dequeue();
GroupNode peek();
bool isFull();
bool isEmpty();
    private:
void repairUpward(int nodeIndex);
void repairDownward(int nodeIndex);
GroupNode* priorityQueue; //pointer to the array used to implement priority queue
    int currentQueueSize; //number of group currently in the priority queue
    int maxQueueSize; //maximum capacity of priority queue
};

class heap{
  public:
    heap(int heapSize);
    ~heap();
    void addNodes();
    void setInput();
    void printTree();
    int run();
  private:
    int currLength;
    int maxLength;
    gate* hep;
}
